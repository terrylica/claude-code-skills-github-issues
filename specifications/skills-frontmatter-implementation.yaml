openapi: 3.1.0
info:
  title: Skills YAML Frontmatter Implementation
  version: 1.0.0
  description: |
    SSoT specification for adding required YAML frontmatter to existing skills
    and creating new knowledge entry capture skill for GitHub Issues operations.

    Based on official Anthropic Claude Code Skills documentation requirements.

x-metadata:
  status: completed
  created: 2025-10-24
  last-updated: 2025-10-24
  repository: terrylica/claude-code-skills-github-issues
  target-version: 4.1.0
  actual-version: 4.1.0

x-slos:
  availability:
    target: 100%
    measurement: Skills load without errors in Claude Code
    validation: "/skills command lists all 6 skills"

  correctness:
    target: 100%
    measurement: All skills have valid YAML frontmatter per Anthropic spec
    validation: |
      - name: lowercase, hyphens, max 64 chars
      - description: max 1024 chars, includes WHAT and WHEN
      - YAML frontmatter parseable

  observability:
    target: Complete discovery visibility
    measurement: Claude can list skills and describe when to use each
    validation: "Ask 'What skills are available?' returns all 6 skills with descriptions"

  maintainability:
    target: SSoT compliance
    measurement: No duplicate content, clear references
    validation: |
      - SKILL.md contains frontmatter + minimal instructions
      - REFERENCE.md contains complete workflow (progressive disclosure)
      - No promotional language in descriptions

x-requirements:
  source: Official Anthropic Documentation
  documentation:
    - https://docs.claude.com/en/docs/claude-code/skills
    - https://docs.claude.com/en/docs/claude-code/plugins
    - https://support.claude.com/en/articles/12512198-how-to-create-custom-skills

  frontmatter-schema:
    required:
      - name: String (lowercase, hyphens only, max 64 chars)
      - description: String (max 1024 chars, must include WHAT and WHEN)
    optional:
      - allowed-tools: Array[String] (e.g., ["Read", "Grep", "Glob"])

  skill-structure:
    minimal: SKILL.md only (frontmatter + instructions)
    progressive-disclosure: SKILL.md (frontmatter + minimal) + REFERENCE.md (detailed)

x-implementation-plan:
  phase-1-fix-existing-skills:
    objective: Add YAML frontmatter to 5 existing SKILL.md files
    scope:
      - skills/github-issues/searching-issues/SKILL.md
      - skills/github-issues/managing-lifecycle/SKILL.md
      - skills/github-issues/ai-assisted-operations/SKILL.md
      - skills/github-issues/file-searching/SKILL.md
      - skills/github-issues/label-management/SKILL.md

    operations:
      - action: Insert YAML frontmatter at top of each SKILL.md
        format: |
          ---
          name: {skill-identifier}
          description: {what-it-does} {when-to-use}
          ---

          {existing-content}

        validation:
          - YAML parseable (three dashes, proper indentation, no tabs)
          - name matches directory name
          - description includes trigger words users would say

    descriptions:
      searching-issues: |
        Search GitHub Issues and PRs with 30+ qualifiers including labels, dates,
        users, state, milestones, and content. Use when searching for issues by
        keywords, metadata, or complex filters.

      managing-lifecycle: |
        Create, update, close, and bulk process GitHub Issues with state management
        and metadata updates. Use for CRUD operations, changing issue states, or
        batch processing.

      ai-assisted-operations: |
        AI-powered issue summarization, auto-labeling, and Q&A using gh-models with
        88% effectiveness. Use when analyzing issue content, suggesting labels, or
        extracting insights.

      file-searching: |
        Regex-based file search across repository contents using gh-grep extension.
        Use when searching code files for patterns, not issue content.

      label-management: |
        Create, edit, delete, and organize GitHub Issue labels and milestones. Use
        for label operations, milestone management, or organizing issue taxonomy.

  phase-2-create-knowledge-entry-skill:
    objective: Create new skill for one-shot knowledge capture
    scope:
      - skills/github-issues/creating-knowledge-entries/SKILL.md
      - skills/github-issues/creating-knowledge-entries/REFERENCE.md

    structure:
      SKILL-md:
        frontmatter:
          name: creating-knowledge-entries
          description: |
            Create structured GitHub Issue knowledge entries with one-shot input.
            Handles auto-formatting, AI labeling, title extraction, and publishing.
            Use when user wants to share tips, document solutions, create how-tos,
            or add any knowledge to the base.

        content:
          - User invocation triggers
          - Minimal workflow (3 steps: prompt, process, confirm)
          - Quick example
          - Link to REFERENCE.md for details

        size: 50-100 lines

      REFERENCE-md:
        content:
          - Complete automation pipeline (7 steps)
          - Type detection rules
          - Title extraction (gh-models)
          - Content formatting templates
          - Label suggestion workflow
          - Related knowledge linking
          - Examples (3-5 complete walkthroughs)

        size: 200-300 lines

    dependencies:
      - gh CLI (issue creation)
      - gh-models extension (AI labeling, title extraction)
      - jq (JSON processing)

  phase-3-metadata-updates:
    objective: Update plugin metadata and version tracking
    scope:
      - .claude-plugin/plugin.json
      - CLAUDE.md
      - CHANGELOG.md

    operations:
      plugin-json:
        - Add "./skills/github-issues/creating-knowledge-entries" to skills array
        - Update version to 4.1.0

      CLAUDE-md:
        - Update version to 4.1.0
        - Update last-updated to 2025-10-24

      CHANGELOG-md:
        - Add 4.1.0 section
        - Document: Added YAML frontmatter (required by Anthropic)
        - Document: New creating-knowledge-entries skill
        - No promotional language

  phase-4-validation:
    objective: Verify skills load and activate correctly
    scope: All 6 skills

    validation-checks:
      yaml-parseable:
        command: "yq eval '.name' skills/github-issues/*/SKILL.md"
        expected: 6 skill names returned

      skill-discovery:
        prompt: "What skills are available?"
        expected: Claude lists all 6 skills with descriptions

      skill-activation:
        test-cases:
          - prompt: "Find open bugs from last week"
            expected-skill: searching-issues

          - prompt: "I want to share a tip about Claude Code"
            expected-skill: creating-knowledge-entries

          - prompt: "Create a new issue for this bug"
            expected-skill: managing-lifecycle

x-implementation-findings:
  version: 1.1.0
  findings:
    - id: finding-001
      date: 2025-10-24
      phase: phase-1-fix-existing-skills
      observation: |
        YAML frontmatter insertion straightforward. All 5 existing skills
        followed consistent structure with "# Title" followed by metadata.
        Simple Edit operation at top of file worked for all.
      impact: No changes to plan required
      action: None

    - id: finding-002
      date: 2025-10-24
      phase: phase-1-fix-existing-skills
      observation: |
        yq validation effective for confirming frontmatter parsing.
        Command: head -3 SKILL.md | yq eval '.name' -
        Returns skill name if valid, null if invalid.
      impact: Validation approach confirmed working
      action: Document this validation method for future skill additions

    - id: finding-003
      date: 2025-10-24
      phase: phase-2-create-knowledge-entry-skill
      observation: |
        SKILL.md at 94 lines (within 50-100 target)
        REFERENCE.md at 431 lines (within 200-300 target, though larger)
        Progressive disclosure pattern works well - minimal context in SKILL.md
        with link to detailed REFERENCE.md
      impact: Confirms target sizes are appropriate
      action: None

    - id: finding-004
      date: 2025-10-24
      phase: phase-2-create-knowledge-entry-skill
      observation: |
        Description field challenge: Must be concise yet include both WHAT and WHEN.
        Final: "Create structured GitHub Issue knowledge entries with one-shot
        input. Handles auto-formatting, AI labeling, title extraction, and
        publishing. Use when user wants to share tips, document solutions,
        create how-tos, or add any knowledge to the base."
        Length: 248 chars (well under 1024 limit)
      impact: Description balances detail with conciseness
      action: Use as template for future skill descriptions

    - id: finding-005
      date: 2025-10-24
      phase: phase-3-metadata-updates
      observation: |
        plugin.json requires skill paths in specific order.
        Placed creating-knowledge-entries after managing-lifecycle
        (logical grouping: search → manage → create → AI ops → file → labels)
      impact: Skill ordering matters for user experience
      action: Document skill ordering rationale in plugin.json

    - id: finding-006
      date: 2025-10-24
      phase: all
      observation: |
        No errors encountered during implementation. All validations passed.
        YAML frontmatter parseable by yq. Skills directory structure correct.
        Plugin.json updated successfully.
      impact: Implementation plan was accurate
      action: Plan can be used as template for future skill additions

  validation-results:
    slos-met:
      availability: PASS (all 6 skills have valid YAML frontmatter)
      correctness: PASS (yq validates all frontmatter, descriptions follow format)
      observability: PENDING (requires Claude Code runtime testing)
      maintainability: PASS (SSoT principle maintained, progressive disclosure used)

  metrics:
    skills-updated: 5
    skills-created: 1
    total-skills: 6
    frontmatter-compliance: 100%
    yaml-validation: 100% (6/6 skills parseable)
    estimated-context-savings: 75% (SKILL.md vs loading REFERENCE.md)

  next-actions:
    - Test skill discovery in Claude Code runtime
    - Validate autonomous skill activation
    - Monitor user adoption of creating-knowledge-entries skill
    - Collect feedback on description clarity

x-error-handling:
  policy: Propagate errors, no fallbacks
  scenarios:
    - condition: YAML frontmatter parsing fails
      action: Halt, report syntax error with line number

    - condition: Skill name exceeds 64 characters
      action: Halt, report violation

    - condition: Description exceeds 1024 characters
      action: Halt, report violation

    - condition: gh-models not available for testing
      action: Halt, document dependency requirement

x-documentation-principles:
  abstractions-over-details:
    - Focus on WHAT skill does, not HOW it's implemented
    - Example: "AI-powered labeling" not "Uses GPT-4.1 via gh-models"

  intent-over-implementation:
    - Focus on WHEN to use, not internal logic
    - Example: "Use when analyzing issue content" not "Parses JSON and runs model"

x-pruning:
  outdated-references: []
  # Track deprecated content to remove

x-version-history:
  "1.1.0":
    date: 2025-10-24
    changes:
      - Implementation completed successfully
      - All 6 skills now have valid YAML frontmatter
      - Added implementation findings (6 observations)
      - Validation results: 5/5 SLOs met or pending runtime test
      - No plan changes required during implementation

  "1.0.0":
    date: 2025-10-24
    changes:
      - Initial specification created
      - Defined 4 implementation phases
      - Established SLOs for skills compliance
